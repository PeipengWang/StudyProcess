vnote_backup_file_826537664 E:/笔记/StudyProcess/Web开发/跨域问题解决方案.md
# 跨域问题与解决方法
## 同源策略
浏览器很容易受到XSS、CSFR等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
同源策略限制以下几种行为：  
Cookie、LocalStorage 和 IndexDB 无法读取  
DOM和JS对象无法获得  
AJAX 请求不能发送  
## 解决方法
### JSONP跨域
jsonp的原理就是利用<script>标签没有跨域限制，通过<script>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。  
jquery Ajax实现：  
```
$.ajax({
    url: 'http://www.domain2.com:8080/login',
    type: 'get',
    dataType: 'jsonp',  // 请求方式为jsonp
    jsonpCallback: "handleCallback",  // 自定义回调函数名
    data: {}
});

```
Vue axios实现，后端node.js  

jsonp的缺点：只能发送get一种请求。  
### 跨域资源共享（CORS）
CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing）。 
它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 
CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。  
  浏览器将CORS跨域请求分为简单请求和非简单请求。  
  只要同时满足一下两个条件，就属于简单请求  
(1)使用下列方法之一：  
head  
get  
post  
(2)请求的Heder是  
Accept  
Accept-Language  
Content-Language  
Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain  
不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。  

对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。  
CORS请求设置的响应头字段，都以 Access-Control-开头:  
1）Access-Control-Allow-Origin：必选  
  它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。  
2）Access-Control-Allow-Credentials：可选  
  它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。  
3）Access-Control-Expose-Headers：可选  
  CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。  

### nginx代理跨域
nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin...等字段。  
1）nginx配置解决iconfont跨域  
  浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。  
```
location / {
  add_header Access-Control-Allow-Origin *;
}
```
2）nginx反向代理接口跨域  
跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。
实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。  
nginx具体配置：  
```
#proxy服务器
server {
    listen       81;
    server_name  www.domain1.com;

    location / {
        proxy_pass   http://www.domain2.com:8080;  #反向代理
        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名
        index  index.html index.htm;

        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用
        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*
        add_header Access-Control-Allow-Credentials true;
    }
}
```
### nodejs中间件代理跨域  
 node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。  

转自：
https://juejin.cn/post/6844903882083024910